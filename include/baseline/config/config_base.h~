#ifndef CONFFIG_BASE_H_INCLUDED
#define CONFFIG_BASE_H_INCLUDED

#include "../../include/common.h"
#include "../../include/util/util.h"
//#include "../../include/config/config_tcpServer.h"
//#include "../../include/config/config_appConfig.h"

namespace config
{
	namespace base
	{
	    using namespace util::json;

        //template<typename ObjectType, ValueType>
        class config
        {
        public:
            explicit config(){};
            virtual ~config(){};

            //template<typename Tstring>
            bool load_json(std::string &jsonstr)
            {
                boost::mutex::scoped_lock lock(io_mutex);
                try
                {
                    if(util::json::json_parse(jsonstr, PTree))
                        return true;
                    return false;
                }
                catch(...)
                {
                    return false;
                }
            }

            std::string save_json()
            {
                boost::mutex::scoped_lock lock(io_mutex);
                std::string str;
                util::json::json_make(PTree, str);
                return str;
            }

            template<typename ValueType>
            ValueType get(const std::string &path)
            {
                boost::mutex::scoped_lock lock(io_mutex);
                try
                {
                    //Tstring p(path);
                    return PTree.get<ValueType>(path);
                }
                catch(std::exception& err)
                {
                    LOG_ERROR<<"[config] get() has error: "<<err.what();
                    throw err.what();
                }
                catch(...)
                {
                    LOG_ERROR<<"[config] get() has unknown error.";
                    throw "[config] get() has unknown error!";
                }
                //return true;
            }

            template<typename ValueType>
            bool set(const std::string& path, ValueType value)
            {
                boost::mutex::scoped_lock lock(io_mutex);
                try
                {
                    PTree.put( path,value );
                }
                catch(std::exception& err)
                {
                    LOG_ERROR<<"[config] set() has error: "<<err.what();
                    return false;
                }
                catch(...)
                {
                    LOG_ERROR<<"[config] set() has unknown error.";
                    return false;
                }
                return true;
            }

            void remove(){};

            std::string printFormat()
            {
                //std::cout<<pair<int,const ptree&,> (0, PTree) std::endl;
                boost::mutex::scoped_lock lock(io_mutex);
                try
                {
                    std::string fmt;
                    util::json::json_make(PTree, fmt);
                    return fmt;
                }
                catch(std::exception& err)
                {
                    LOG_ERROR<<"[config] printFormat() has error: "<<err.what();
                    throw err.what();
                }
                catch(...)
                {
                    LOG_ERROR<<"[config] printFormat() has unknown error.";
                    throw "[config] printFormat() has unknown error!";
                }
            }

        protected:
            boost::property_tree::ptree PTree;
            boost::mutex io_mutex;
        };
	}
}
#endif // UTIL_CONFIG_H_INCLUDED
